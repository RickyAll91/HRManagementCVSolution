@page "/aggiungi/{Anagrafica}"
@page "/modifica/{Anagrafica}/{ID:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IAnagraficaModel model
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>@Titolo Hard-Skill</h3>
@if (model == null && Id == null)
{
    <AlertComponent IsDismissable="true"
                    Icon="bi-exclamation-trianglefill"
                    ColorTheme="warning"
                    Title="Attenzione"
                    Message="Nessun elemento corrispondente." />
}
else
{
    <EditForm Model="@model" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="Descrizione" class="form-label">Descrizione</label>
            <div class="col-md-4">
                <InputText id="Descrizione" class="form-control" @bind-Value="model.Descrizione" />
            </div>
            <ValidationMessage For="@(() => model.Descrizione)" />
        </div>
        <div class="mb-3">
            <label for="Attivo" class="form-label">Attivo</label>
            <div class="col-md-4">
                <InputCheckbox id="Attivo" @bind-Value="model.Attivo" />
            </div>
            <ValidationMessage For="@(() => model.Attivo)" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Salva</button>
            <button class="btn btn-light" @onclick="Cancel">Cancella</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public string Anagrafica { get; set; } = string.Empty;
    protected string Titolo = "Aggiungi";

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            Titolo = "Modifica";
            switch (Anagrafica)
            {
                case "hardskills":
                    model = (await Http.GetFromJsonAsync<List<HardSkill>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "softskills":
                    model = (await Http.GetFromJsonAsync<List<SoftSkill>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "titolistudio":
                    model = (await Http.GetFromJsonAsync<List<TitoloStudio>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "tipologiecolloqui":
                    model = (await Http.GetFromJsonAsync<List<TipologiaColloquio>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "tipologiecontratti":
                    model = (await Http.GetFromJsonAsync<List<TipologiaContratto>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "livellicontratti":
                    model = (await Http.GetFromJsonAsync<List<LivelloContrattuale>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "tipologiedocumenti":
                    model = (await Http.GetFromJsonAsync<List<TipologiaDocumento>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "mansioni":
                    model = (await Http.GetFromJsonAsync<List<Mansione>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
                case "benefits":
                    model = (await Http.GetFromJsonAsync<List<Benefit>>($"api/{Anagrafica}/{Id}"))![0];
                    break;
            }
        }
    }
    protected async Task SaveUser()
    {
        if (model.Id != 0)
        {
            await Http.PutAsJsonAsync($"api/{Anagrafica}/{Id}", model);
        }
        else
        {
            await Http.PostAsJsonAsync($"api/{Anagrafica}", model);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo($"/visualizza/{Anagrafica}");
    }
}